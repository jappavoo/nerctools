#!/bin/bash
set -x
# not we force no strict host key checking as when VM's get rebuilt their
# host keys will often get regenerated
NUM_RETRY=10
SLEEP=$((60 * 1))
OSCMD=${OSCMD:-openstack}

scriptdir=$(dirname $(realpath $0))
configdir=$scriptdir/config

if [[ -z $CREDRC ]] && [[ -a $configdir/default_cred.rc ]]; then
   CREDRC=$configdir/default_cred.rc
fi
if [[ -z $CREDRC ]]; then
  echo "$0: ERROR: no credential rc file specified via CREDRC environment variable and no default configured." > /dev/stderr
  exit -1
fi   

source $CREDRC

server=$1

if [[ -z $server ]] && [[ -a $configdir/default_server ]]; then
   server=$(cat $configdir/default_server)
fi
if [[ -z $server ]]; then
  echo "$0: ERROR: no server instance specified and no default configured"
  exit -1
fi

# simple way to test if the ssh server is up is to use an ssh command
# that is known to fail due to bad authentication or other user error
# with a short connection time out... this way if the system is down
# we can figure it out quickly ... however if it is up then we will
# fail quickly due an early rejection... at least that my story and
# I am sticking to it ;-)
function isup()
{
#    set -x
    local s=$1
    local out
    local rc=0
    
    #! $OSCMD server ssh $s -- -l nobody -i /dev/null -v -o "StrictHostKeyChecking no" ConnectTimeout=1 -o ConnectTimeout=1 -o ConnectionAttempts=1 true 2>&1 | grep -i  "timed out"
    # not sure if we really need  ConnectionAttempts=1 so default behaviour for the moment is not to use it
    out=$($OSCMD server ssh $s -- -l nobody -i /dev/null -v -o 'StrictHostKeyChecking\ no' -o ConnectTimeout=1 true 2>&1)
    if [[ $out =~ ^No\ server.*$ ]]; then
	rc=1
    elif [[ $out =~ ^.*Operation\ timed\ out.* ]]; then
	rc=2
    else
	rc=0
    fi
    return $rc
}

for ((i=0; i<NUM_RETRY; i++)); do
    isup $server
    case $? in
	0)
	    # server is up so we don't need to loop
	    break;
	    ;;
	1)
	    # server does not exist so we must create it.  creation also starts
	    [[ -z $NERCSSH_SILENT ]] && echo "$server does not EXIST ...creating and starting it up... be patient" > /dev/stderr
	    [[ -z $CREATE_ARGS && -a $configdir/$server ]] && . $configdir/$server
	    $OSCMD server create --wait --security-group default  --security-group ssh_only $CREATE_ARGS $server
	    [[ -n $FLOAT_IP ]] && $OSCMD server add floating ip $server $FLOAT_IP
	    ;;
	2)
	    # server exists but does not seem to be started
	    [[ -z $NERCSSH_SILENT ]] && echo "$server is not ACTIVE...starting it up... be patient" > /dev/stderr
	    if $OSCMD server start $server 2>&1 > /dev/stderr; then
		[[ -z $NERCSSH_SILENT ]] && echo "Sent start command : $OSCMD server start $server" > /dev/stderr
	    else
		[[ -z $NERCSSH_SILENT ]] && echo "Start command failed will try again if needed" > /dev/stderr
	    fi
	    ;;
    esac
    [[ -z $NERCSSH_SILENT ]] && echo "sleeping for $SLEEP seconds .... while we wait for the system come back up" > /dev/stderr
    sleep $SLEEP 
done

if ((i==NUM_RETRY)); then
    echo "WTF!!! Was not able to start $server or at least not confirm it is ACTIVE" > /dev/stderr
    exit -1
fi
shift

exec $OSCMD server ssh $server -- -o 'StrictHostKeyChecking\ no' $@
